#include <stdio.h>
#include <time.h>

int max(int x, int y) {
    return (x > y) ? x : y;
}

int knap(int n, int w[], int value[], int m, int v[][10]) {
    int i, j;
    for (i = 0; i <= n; i++)
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0)
                v[i][j] = 0;
            else if (j < w[i])
                v[i][j] = v[i - 1][j];
            else
                v[i][j] = max(v[i - 1][j], value[i] + v[i - 1][j - w[i]]);
        }
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            printf("%d\t", v[i][j]);
        }
        printf("\n");
    }
    return v[n][m];
}

int main() {
    int n, i, j, w[10], value[10], m, result;

    printf("Enter the number of items:");
    scanf("%d", &n);

    printf("Enter the weights of %d items:\n", n);
    for (i = 1; i <= n; i++) {
        scanf("%d", &w[i]);
    }

    printf("Enter the value of %d items:\n", n);
    for (i = 1; i <= n; i++) {
        scanf("%d", &value[i]);
    }

    printf("Enter the maximum weight capacity of knapsack:");
    scanf("%d", &m);

    int v[10][10];

    clock_t start_time = clock();
    result = knap(n, w, value, m, v);
    clock_t end_time = clock();

    double total_time = ((double) (end_time - start_time)) / CLOCKS_PER_SEC;

    printf("The maximum value that can be obtained is: %d\n", result);
    printf("Runtime: %f seconds\n", total_time);

    return 0;
}
